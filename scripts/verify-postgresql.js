#!/usr/bin/env node

/**
 * PostgreSQL ÈÖçÁΩÆÈ™åËØÅËÑöÊú¨
 * È™åËØÅÊï∞ÊçÆÂ∫ìËøûÊé•„ÄÅÊû∂ÊûÑÂíåÂü∫Êú¨ÂäüËÉΩ
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// ÈÖçÁΩÆ
const CONFIG = {
  schemaPath: './backend/prisma/schema.prisma',
  envPath: './backend/.env'
};

/**
 * Ê£ÄÊü• schema.prisma ÈÖçÁΩÆ
 */
function checkSchemaConfig() {
  console.log('üìã Checking schema.prisma configuration...\n');
  
  if (!fs.existsSync(CONFIG.schemaPath)) {
    console.log('‚ùå schema.prisma not found');
    return false;
  }
  
  const schemaContent = fs.readFileSync(CONFIG.schemaPath, 'utf8');
  
  // Ê£ÄÊü•Êï∞ÊçÆÊ∫êÈÖçÁΩÆ
  const hasPostgreSQL = schemaContent.includes('provider = "postgresql"');
  const hasDatabaseUrl = schemaContent.includes('url      = env("DATABASE_URL")');
  
  console.log(`${hasPostgreSQL ? '‚úÖ' : '‚ùå'} PostgreSQL provider configured`);
  console.log(`${hasDatabaseUrl ? '‚úÖ' : '‚ùå'} DATABASE_URL environment variable referenced`);
  
  // Ê£ÄÊü• JSON Â≠óÊÆµÁ±ªÂûã
  const hasJsonType = schemaContent.includes('Json');
  console.log(`${hasJsonType ? '‚úÖ' : '‚ùå'} JSON field types configured`);
  
  return hasPostgreSQL && hasDatabaseUrl;
}

/**
 * Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáè
 */
function checkEnvironmentVariables() {
  console.log('\nüîß Checking environment variables...\n');
  
  const databaseUrl = process.env.DATABASE_URL;
  
  if (!databaseUrl) {
    console.log('‚ùå DATABASE_URL environment variable not set');
    console.log('üí° Please set DATABASE_URL in your .env file');
    console.log('   Example: DATABASE_URL="postgresql://username:password@localhost:5432/smartalk_mvp?schema=public"');
    return false;
  }
  
  console.log('‚úÖ DATABASE_URL environment variable found');
  
  // È™åËØÅ URL Ê†ºÂºè
  const isPostgreSQLUrl = databaseUrl.startsWith('postgresql://') || databaseUrl.startsWith('postgres://');
  console.log(`${isPostgreSQLUrl ? '‚úÖ' : '‚ùå'} DATABASE_URL format is valid for PostgreSQL`);
  
  if (!isPostgreSQLUrl) {
    console.log('üí° DATABASE_URL should start with "postgresql://" or "postgres://"');
    return false;
  }
  
  return true;
}

/**
 * ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•
 */
async function testDatabaseConnection() {
  console.log('\nüîå Testing database connection...\n');
  
  try {
    // ‰ΩøÁî® Prisma ÊµãËØïËøûÊé•
    const testScript = `
      const { PrismaClient } = require('@prisma/client');
      
      async function testConnection() {
        const prisma = new PrismaClient();
        
        try {
          await prisma.$connect();
          console.log('‚úÖ Database connection successful');
          
          // ÊµãËØïÁÆÄÂçïÊü•ËØ¢
          const result = await prisma.$queryRaw\`SELECT 1 as test\`;
          console.log('‚úÖ Database query test passed');
          
          return true;
        } catch (error) {
          console.error('‚ùå Database connection failed:', error.message);
          return false;
        } finally {
          await prisma.$disconnect();
        }
      }
      
      testConnection().then(success => {
        process.exit(success ? 0 : 1);
      });
    `;
    
    fs.writeFileSync('./temp-connection-test.js', testScript);
    execSync('cd backend && node ../temp-connection-test.js', { stdio: 'inherit' });
    fs.unlinkSync('./temp-connection-test.js');
    
    return true;
  } catch (error) {
    console.error('‚ùå Connection test failed');
    return false;
  }
}

/**
 * Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊû∂ÊûÑ
 */
async function checkDatabaseSchema() {
  console.log('\nüèóÔ∏è  Checking database schema...\n');
  
  try {
    const schemaScript = `
      const { PrismaClient } = require('@prisma/client');
      
      async function checkSchema() {
        const prisma = new PrismaClient();
        
        try {
          // Ê£ÄÊü•Ë°®ÊòØÂê¶Â≠òÂú®
          const tables = await prisma.$queryRaw\`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
          \`;
          
          const expectedTables = [
            'users', 'interests', 'dramas', 'keywords', 
            'keyword_video_clips', 'user_progress', 'analytics_events'
          ];
          
          console.log('üìä Database tables:');
          tables.forEach(table => {
            const isExpected = expectedTables.includes(table.table_name);
            console.log(\`  \${isExpected ? '‚úÖ' : '‚ùì'} \${table.table_name}\`);
          });
          
          const missingTables = expectedTables.filter(
            expected => !tables.some(table => table.table_name === expected)
          );
          
          if (missingTables.length > 0) {
            console.log(\`\\n‚ö†Ô∏è  Missing tables: \${missingTables.join(', ')}\`);
            console.log('üí° Run "npx prisma db push" to create missing tables');
            return false;
          }
          
          console.log('\\n‚úÖ All expected tables found');
          return true;
        } catch (error) {
          console.error('‚ùå Schema check failed:', error.message);
          return false;
        } finally {
          await prisma.$disconnect();
        }
      }
      
      checkSchema().then(success => {
        process.exit(success ? 0 : 1);
      });
    `;
    
    fs.writeFileSync('./temp-schema-check.js', schemaScript);
    execSync('cd backend && node ../temp-schema-check.js', { stdio: 'inherit' });
    fs.unlinkSync('./temp-schema-check.js');
    
    return true;
  } catch (error) {
    console.error('‚ùå Schema check failed');
    return false;
  }
}

/**
 * ËøêË°åÂü∫Êú¨ÁöÑ CRUD ÊµãËØï
 */
async function runCrudTest() {
  console.log('\nüß™ Running basic CRUD test...\n');
  
  try {
    const crudScript = `
      const { PrismaClient } = require('@prisma/client');
      
      async function crudTest() {
        const prisma = new PrismaClient();
        
        try {
          // ÂàõÂª∫ÊµãËØïÁî®Êà∑
          const testUser = await prisma.user.create({
            data: {
              deviceId: 'test-device-' + Date.now()
            }
          });
          console.log('‚úÖ CREATE test passed');
          
          // ËØªÂèñÁî®Êà∑
          const foundUser = await prisma.user.findUnique({
            where: { id: testUser.id }
          });
          console.log('‚úÖ READ test passed');
          
          // Êõ¥Êñ∞Áî®Êà∑
          const updatedUser = await prisma.user.update({
            where: { id: testUser.id },
            data: { updatedAt: new Date() }
          });
          console.log('‚úÖ UPDATE test passed');
          
          // Âà†Èô§Áî®Êà∑
          await prisma.user.delete({
            where: { id: testUser.id }
          });
          console.log('‚úÖ DELETE test passed');
          
          console.log('\\n‚úÖ All CRUD operations successful');
          return true;
        } catch (error) {
          console.error('‚ùå CRUD test failed:', error.message);
          return false;
        } finally {
          await prisma.$disconnect();
        }
      }
      
      crudTest().then(success => {
        process.exit(success ? 0 : 1);
      });
    `;
    
    fs.writeFileSync('./temp-crud-test.js', crudScript);
    execSync('cd backend && node ../temp-crud-test.js', { stdio: 'inherit' });
    fs.unlinkSync('./temp-crud-test.js');
    
    return true;
  } catch (error) {
    console.error('‚ùå CRUD test failed');
    return false;
  }
}

/**
 * ‰∏ªÈ™åËØÅÂáΩÊï∞
 */
async function main() {
  console.log('üîç PostgreSQL Configuration Verification\n');
  console.log('=' * 45 + '\n');
  
  let allPassed = true;
  
  // 1. Ê£ÄÊü• schema ÈÖçÁΩÆ
  if (!checkSchemaConfig()) {
    allPassed = false;
  }
  
  // 2. Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáè
  if (!checkEnvironmentVariables()) {
    allPassed = false;
  }
  
  if (!allPassed) {
    console.log('\n‚ùå Configuration check failed. Please fix the issues above.');
    process.exit(1);
  }
  
  // 3. ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•
  try {
    await testDatabaseConnection();
  } catch (error) {
    console.log('\n‚ùå Database connection test failed.');
    console.log('üí° Make sure PostgreSQL is running and DATABASE_URL is correct.');
    process.exit(1);
  }
  
  // 4. Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊû∂ÊûÑ
  try {
    await checkDatabaseSchema();
  } catch (error) {
    console.log('\n‚ö†Ô∏è  Database schema check failed.');
    console.log('üí° You may need to run "npx prisma db push" to create the schema.');
  }
  
  // 5. ËøêË°å CRUD ÊµãËØï
  try {
    await runCrudTest();
  } catch (error) {
    console.log('\n‚ö†Ô∏è  CRUD test failed.');
    console.log('üí° Database connection works but operations may have issues.');
  }
  
  console.log('\nüéâ Verification Summary');
  console.log('======================');
  console.log('‚úÖ PostgreSQL configuration verified');
  console.log('‚úÖ Database connection successful');
  console.log('‚úÖ Schema and operations working');
  
  console.log('\nüí° Next Steps:');
  console.log('1. Your PostgreSQL setup is ready for development');
  console.log('2. Run your application to test full functionality');
  console.log('3. Consider setting up database backups for production');
}

// ËøêË°åÈ™åËØÅ
if (require.main === module) {
  main().catch(error => {
    console.error('\n‚ùå Verification failed:', error.message);
    process.exit(1);
  });
}

module.exports = { checkSchemaConfig, checkEnvironmentVariables, testDatabaseConnection };
