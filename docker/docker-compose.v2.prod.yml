version: '3.8'

services:
  # PostgreSQL Database - V2 Enhanced
  postgres:
    image: postgres:15-alpine
    container_name: smartalk-v2-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-smartalk_v2_prod}
      POSTGRES_USER: ${POSTGRES_USER:-smartalk_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_v2_data:/var/lib/postgresql/data
      - ./postgres-config:/etc/postgresql
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - smartalk-v2-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-smartalk_user} -d ${POSTGRES_DB:-smartalk_v2_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis Cache - V2 Enhanced
  redis:
    image: redis:7-alpine
    container_name: smartalk-v2-redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_v2_data:/data
      - ./redis-config:/usr/local/etc/redis
    ports:
      - "6379:6379"
    networks:
      - smartalk-v2-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000

  # SmarTalk V2 Backend API
  smartalk-v2-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.v2.prod
      args:
        VERSION: v2.0.0
        BUILD_DATE: ${BUILD_DATE}
        V2_FEATURES_ENABLED: true
    container_name: smartalk-v2-backend
    restart: unless-stopped
    environment:
      # Core Configuration
      - NODE_ENV=production
      - PORT=3001
      - API_VERSION=v2
      
      # Database
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      
      # V2 API Integrations
      - IFLYTEK_APP_ID=${IFLYTEK_APP_ID}
      - IFLYTEK_API_KEY=${IFLYTEK_API_KEY}
      - IFLYTEK_API_SECRET=${IFLYTEK_API_SECRET}
      - ELSA_API_KEY=${ELSA_API_KEY}
      
      # CDN Configuration
      - CDN_PROVIDER=cloudflare
      - CDN_BASE_URL=${CDN_BASE_URL}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID}
      
      # AWS S3 Storage
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-ap-southeast-1}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      
      # V2 Feature Flags
      - FEATURE_STORY_DRIVEN_LEARNING=true
      - FEATURE_DUAL_MODE_PLAYER=true
      - FEATURE_FOCUS_MODE=true
      - FEATURE_RESCUE_MODE=true
      - FEATURE_5_KEYWORD_VALIDATION=true
      - FEATURE_PRONUNCIATION_DUAL_API=true
      
      # Performance Targets
      - VIDEO_LOADING_TARGET=1000
      - API_RESPONSE_TARGET=1500
      - STARTUP_TIME_TARGET=2000
      
      # Content Validation
      - ENFORCE_5_KEYWORDS=true
      - ENFORCE_30_SECOND_DURATION=true
      - DURATION_TOLERANCE=0.5
      
      # Error Recovery
      - FOCUS_MODE_TRIGGER_THRESHOLD=2
      - RESCUE_MODE_TRIGGER_THRESHOLD=3
      
      # Analytics
      - ANALYTICS_ENABLED=true
      - MIXPANEL_TOKEN=${MIXPANEL_TOKEN}
      - SENTRY_DSN=${SENTRY_DSN}
      
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartalk-v2-network
    volumes:
      - v2_uploads:/app/uploads
      - v2_content:/app/content
      - v2_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v2/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy - V2 Enhanced
  nginx:
    image: nginx:alpine
    container_name: smartalk-v2-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/v2-nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/v2-default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - v2_static:/var/www/static:ro
    depends_on:
      - smartalk-v2-backend
    networks:
      - smartalk-v2-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Monitoring - V2 Enhanced
  grafana:
    image: grafana/grafana:latest
    container_name: smartalk-v2-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_v2_data:/var/lib/grafana
      - ./grafana/v2-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/v2-datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - smartalk-v2-network
    depends_on:
      - postgres
      - redis

  # Prometheus Metrics - V2 Enhanced
  prometheus:
    image: prom/prometheus:latest
    container_name: smartalk-v2-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/v2-prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_v2_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - smartalk-v2-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # File Upload Service - V2 Enhanced
  file-service:
    build:
      context: ../services/file-service
      dockerfile: Dockerfile.v2
    container_name: smartalk-v2-file-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - CDN_BASE_URL=${CDN_BASE_URL}
      - MAX_FILE_SIZE=104857600
      - ALLOWED_VIDEO_FORMATS=mp4,webm,mov
      - ALLOWED_AUDIO_FORMATS=mp3,aac,wav
    ports:
      - "3002:3002"
    networks:
      - smartalk-v2-network
    volumes:
      - v2_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Job Processor - V2 Enhanced
  job-processor:
    build:
      context: ../backend
      dockerfile: Dockerfile.v2.jobs
    container_name: smartalk-v2-jobs
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - IFLYTEK_APP_ID=${IFLYTEK_APP_ID}
      - IFLYTEK_API_KEY=${IFLYTEK_API_KEY}
      - IFLYTEK_API_SECRET=${IFLYTEK_API_SECRET}
      - ELSA_API_KEY=${ELSA_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartalk-v2-network
    volumes:
      - v2_content:/app/content
      - v2_logs:/app/logs

networks:
  smartalk-v2-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_v2_data:
    driver: local
  redis_v2_data:
    driver: local
  grafana_v2_data:
    driver: local
  prometheus_v2_data:
    driver: local
  v2_uploads:
    driver: local
  v2_content:
    driver: local
  v2_static:
    driver: local
  v2_logs:
    driver: local
