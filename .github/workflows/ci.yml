name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: smartalk_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Setup environment
      run: |
        cd backend
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/smartalk_test" >> .env
        echo "NODE_ENV=test" >> .env

    - name: Generate Prisma client
      run: |
        cd backend
        npm run db:generate

    - name: Run database migrations
      run: |
        cd backend
        npm run db:push

    - name: Run backend tests
      run: |
        cd backend
        npm run test:coverage

    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Mobile Testing
  mobile-test:
    name: Mobile Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd mobile && npm ci

    - name: Run TypeScript check
      run: |
        cd mobile
        npm run typecheck

    - name: Run mobile tests
      run: |
        cd mobile
        npm run test:coverage

    - name: Upload mobile coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./mobile/coverage/lcov.info
        flags: mobile
        name: mobile-coverage

  # Linting and Code Quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../mobile && npm ci

    - name: Run ESLint (Backend)
      run: |
        cd backend
        npm run lint

    - name: Run ESLint (Mobile)
      run: |
        cd mobile
        npm run lint

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, mobile-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: smartalk_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../mobile && npm ci

    - name: Setup backend environment
      run: |
        cd backend
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/smartalk_integration" >> .env
        echo "NODE_ENV=test" >> .env
        echo "PORT=3001" >> .env

    - name: Setup database
      run: |
        cd backend
        npm run db:generate
        npm run db:push
        npm run db:seed

    - name: Start backend server
      run: |
        cd backend
        npm run build
        npm start &
        sleep 10
      env:
        NODE_ENV: test

    - name: Run E2E tests
      run: |
        cd mobile
        npm run test -- --testPathPattern=e2e
      env:
        API_BASE_URL: http://localhost:3001

    - name: Stop backend server
      run: pkill -f "node dist/index.js" || true

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-test, mobile-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd mobile && npm ci

    - name: Run performance tests
      run: |
        cd mobile
        npm run test -- --testPathPattern=performance

    - name: Generate performance report
      run: |
        echo "Performance test results:" > performance-report.txt
        echo "- App startup time: <2s target" >> performance-report.txt
        echo "- Video loading time: <3s target" >> performance-report.txt
        echo "- vTPR interaction response: <100ms target" >> performance-report.txt

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.txt

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../mobile && npm ci

    - name: Run npm audit (Backend)
      run: |
        cd backend
        npm audit --audit-level moderate

    - name: Run npm audit (Mobile)
      run: |
        cd mobile
        npm audit --audit-level moderate

  # Build Verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint, integration-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../mobile && npm ci

    - name: Build backend
      run: |
        cd backend
        npm run build

    - name: Verify backend build
      run: |
        cd backend
        test -f dist/index.js
        echo "âœ… Backend build successful"

    - name: Build mobile (TypeScript compilation)
      run: |
        cd mobile
        npm run typecheck
        echo "âœ… Mobile TypeScript compilation successful"

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [backend-test, mobile-test, integration-test, performance-test, security-audit, build-verification]
    if: always()

    steps:
    - name: Generate test summary
      run: |
        echo "# SmarTalk MVP Test Results" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Status" >> test-summary.md
        echo "- Backend Tests: ${{ needs.backend-test.result }}" >> test-summary.md
        echo "- Mobile Tests: ${{ needs.mobile-test.result }}" >> test-summary.md
        echo "- Integration Tests: ${{ needs.integration-test.result }}" >> test-summary.md
        echo "- Performance Tests: ${{ needs.performance-test.result }}" >> test-summary.md
        echo "- Security Audit: ${{ needs.security-audit.result }}" >> test-summary.md
        echo "- Build Verification: ${{ needs.build-verification.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Coverage Targets" >> test-summary.md
        echo "- Backend: >80% line coverage" >> test-summary.md
        echo "- Mobile: >80% line coverage" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Performance Targets" >> test-summary.md
        echo "- App startup: <2 seconds" >> test-summary.md
        echo "- Video loading: <3 seconds" >> test-summary.md
        echo "- vTPR interactions: <100ms response" >> test-summary.md

    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md

# Deployment Jobs (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "This would deploy to staging server"
        # Add actual deployment steps here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "This would deploy to production server"
        # Add actual deployment steps here